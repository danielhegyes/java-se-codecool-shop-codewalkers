package com.codecool.shop.dao.implementation;

import com.codecool.shop.dao.ProductCategoryDao;
import com.codecool.shop.model.ProductCategory;


import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.sql.*;

/**
 * This class implements the ProductCategoryDao interface with database connection.
 * It is a singleton class, it only has one instance.
 */
public class ProductCategoryDaoJDBC implements ProductCategoryDao {

    private static String configFile = "dbConfig.txt";
    private static List<String> configParams = readConfigFile();
    private static final String DATABASE = "jdbc:postgresql://localhost:5432/codecoolshop";
    private static final String DB_USER = configParams.get(0);
    private static final String DB_PASSWORD = configParams.get(1);

    private static ProductCategoryDaoJDBC instance = null;

    /**
     * The readConfigFile() method reads an external file
     * which contains data for the database connection.
     * @return {@literal List<String>}
     */
    private static List<String> readConfigFile() {
        try {
            return Files.readAllLines(Paths.get(configFile), Charset.defaultCharset());
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Config file not found");
        }
        return null;
    }


    private ProductCategoryDaoJDBC() {
    }

    public static ProductCategoryDaoJDBC getInstance() {
        if (instance == null) {
            instance = new ProductCategoryDaoJDBC();
        }
        return instance;
    }

    /**
     * The add() method insert a new row in the database.
     * @param productCategory {@code ProductCategory} instance
     */
    @Override
    public void add(ProductCategory productCategory) {
        String query = "INSERT INTO product_category (id, name, description, department) " +
                "VALUES ('" + productCategory.getId() + "','" + productCategory.getName() + "', '" + productCategory.getDescription() + "', '" + productCategory.getDepartment() + "');";
        executeQuery(query);
    }

    /**
     * The find() method select a row from the database and
     * make a {@code ProductCategory} instance of it.
     * @param id The {@code id} attribute of a {@code ProductCategory} instance
     * @return {@code ProductCategory} instance
     */
    @Override
    public ProductCategory find(int id) {

        String query = "SELECT * FROM product_category WHERE id ='" + id + "';";

        try (Connection connection = getConnection();
             Statement statement =connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query);
        ){
            if (resultSet.next()){
                return instantiateProductCategoryFromQuery(resultSet);
            } else {
                return null;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return null;
    }

    /**
     * The remove() method delete a row from the database.
     * <b>Note:</b> Careful with this as this is a foreign key in the
     * product table.
     * @param id The {@code id} attribute of a {@code ProductCategory} instance
     */
    @Override
    public void remove(int id) {
        String query = "DELETE FROM product_category WHERE id = '" + id +"';";
        executeQuery(query);
    }

    /**
     * The getAll() method instantiate all the product categories in the database
     * and puts them in a list.
     * @return {@literal List<ProductCategory>} A list of {@code ProductCategory} instances
     */
    @Override
    public List<ProductCategory> getAll() {
        String query = "SELECT * FROM product_category;";

        List<ProductCategory> resultList = new ArrayList<>();

        try (Connection connection = getConnection();
             Statement statement =connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query);
        ){
            while (resultSet.next()){
                ProductCategory actProdCat = instantiateProductCategoryFromQuery(resultSet);
                resultList.add(actProdCat);
            }


        } catch (SQLException e) {
            e.printStackTrace();
        }

        return resultList;
    }

    /**
     * This method instantiate a {@code ProductCategory} instance
     * based on a database query.
     * @param resultSet A table of data representing a database result set, which
     * is usually generated by executing a statement that queries the database.
     * @return {@code ProductCategory} instance
     * @throws SQLException 
     */
    public ProductCategory instantiateProductCategoryFromQuery(ResultSet resultSet) throws SQLException {
        ProductCategory result = new ProductCategory(resultSet.getInt("id"),
                resultSet.getString("name"),
                resultSet.getString("description"),
                resultSet.getString("department"));
        return result;
    }

    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(
                DATABASE,
                DB_USER,
                DB_PASSWORD);
    }

    private void executeQuery(String query) {
        try (Connection connection = getConnection();
             Statement statement =connection.createStatement();
        ){
            statement.execute(query);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        ProductCategory newCat1 = new ProductCategory("newcat", "dep", "desc");
        ProductCategory newCat2 = new ProductCategory("newcat2", "dep2", "desc");
        ProductCategoryDaoJDBC prodCatDaoJdbc = ProductCategoryDaoJDBC.getInstance();
        prodCatDaoJdbc.add(newCat1);
        prodCatDaoJdbc.add(newCat2);
        System.out.println(prodCatDaoJdbc.find(0));
        System.out.println(prodCatDaoJdbc.find(1));
        System.out.println(prodCatDaoJdbc.getAll());
    }

}
